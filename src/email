!pip install transformers torch sentencepiece accelerate

import torch
from transformers import pipeline

# Load model once at startup
generator = pipeline('text-generation', model='google/flan-t5-small')

def generate_personalized_email(
    recipient_name,
    product_name,
    product_feature,
    company_tone="friendly",
    prompt_template="Write a {company_tone} email to {recipient_name} about our product, {product_name}. A key feature is {product_feature}.",
    max_length=200,
    temperature=0.6,
    num_return_sequences=1
):
    """
    Generates a personalized email using a pre-trained text generation model.

    Args:
        recipient_name: The name of the email recipient.
        product_name: The name of the product being promoted.
        product_feature: A specific feature of the product to highlight.
        company_tone: The desired tone of the email (e.g., "friendly", "professional").
        prompt_template: A string template to guide the model.
        max_length: Maximum output length.
        temperature: Controls randomness in generation (0.0 - 1.0).
        num_return_sequences: Number of responses to generate.

    Returns:
        A string containing the generated email. Returns None on error.
    """
    try:
        prompt = prompt_template.format(
            recipient_name=recipient_name,
            product_name=product_name,
            product_feature=product_feature,
            company_tone=company_tone
        )

        # Generate the email
        generated_text = generator(
            prompt,
            max_length=max_length,
            num_return_sequences=num_return_sequences,
            temperature=temperature,
            do_sample=True
        )[0]['generated_text']

        return generated_text.strip()

    except Exception as e:
        import traceback
        print(f"Error generating email:\n{traceback.format_exc()}")
        return None

# Example usage:
if __name__ == "__main__":
    test_cases = [
        ("Alice Smith", "AI Email Assistant", "automatic personalization based on recipient data", "friendly"),
        ("Bob Johnson", "Data Analytics Platform", "advanced data visualization capabilities", "professional"),
        ("Charlie Brown", "Project Management Software", "seamless integration with Slack", "humorous", 
         "Hey {recipient_name}, just wanted to let you know about our awesome project management software, {product_name}. It's got a sweet feature: {product_feature}! Imagine all the time you'll save! You should check it out.")
    ]

    for case in test_cases:
        recipient, product, feature, tone, *custom_prompt = case
        prompt_template = custom_prompt[0] if custom_prompt else None
        email = generate_personalized_email(recipient, product, feature, tone, prompt_template=prompt_template)
        print(f"\nGenerated Email for {recipient}:\n{email}\n{'-'*60}")